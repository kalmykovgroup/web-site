version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    container_name: website_postgres
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      # Используем переменные окружения из .env если secrets не доступны
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-web_site}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5444:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - website_network

  # ASP.NET Core Web API
  webapi:
    container_name: website_api
    build:
      context: .
      dockerfile: WebSite.Api/Dockerfile
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-web_site}
      - DB_USER=${DB_USER:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - website_network
    volumes:
      - ./logs:/app/logs
    expose:
      - "8080"

  # Nginx Reverse Proxy
  nginx:
    container_name: website_nginx
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint.sh:ro
      - ./nginx/generate-config.sh:/etc/nginx/generate-config.sh:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_cache:/var/cache/nginx
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - AUTO_GENERATE_CONFIG=true
    depends_on:
      - webapi
    networks:
      - website_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    entrypoint: ["/bin/sh", "/docker-entrypoint.sh"]

  # Certbot для SSL сертификатов
  certbot:
    container_name: website_certbot
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx
    networks:
      - website_network

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  website_network:
    driver: bridge